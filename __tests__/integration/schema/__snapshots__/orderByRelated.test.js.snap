// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the order-by-related plugin 1`] = `
"type Backward implements Node {
  \\"\\"\\"Reads a single \`Foo\` that is related to this \`Backward\`.\\"\\"\\"
  fooByFooId: Foo
  fooId: Int
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

type BackwardCompound implements Node {
  backwardCompound1: Int!
  backwardCompound2: Int!

  \\"\\"\\"Reads a single \`Foo\` that is related to this \`BackwardCompound\`.\\"\\"\\"
  fooByBackwardCompound1AndBackwardCompound2: Foo
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`BackwardCompound\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input BackwardCompoundCondition {
  \\"\\"\\"Checks for equality with the object’s \`backwardCompound1\` field.\\"\\"\\"
  backwardCompound1: Int

  \\"\\"\\"Checks for equality with the object’s \`backwardCompound2\` field.\\"\\"\\"
  backwardCompound2: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`BackwardCompound\` values.\\"\\"\\"
type BackwardCompoundsConnection {
  \\"\\"\\"
  A list of edges which contains the \`BackwardCompound\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [BackwardCompoundsEdge!]!

  \\"\\"\\"A list of \`BackwardCompound\` objects.\\"\\"\\"
  nodes: [BackwardCompound]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`BackwardCompound\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`BackwardCompound\` edge in the connection.\\"\\"\\"
type BackwardCompoundsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`BackwardCompound\` at the end of the edge.\\"\\"\\"
  node: BackwardCompound
}

\\"\\"\\"Methods to use when ordering \`BackwardCompound\`.\\"\\"\\"
enum BackwardCompoundsOrderBy {
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  BACKWARD_COMPOUND_2_ASC
  BACKWARD_COMPOUND_2_DESC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__BACKWARD_COMPOUND_1_ASC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__BACKWARD_COMPOUND_1_DESC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__BACKWARD_COMPOUND_2_ASC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__BACKWARD_COMPOUND_2_DESC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__FORWARD_COMPOUND_1_ASC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__FORWARD_COMPOUND_1_DESC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__FORWARD_COMPOUND_2_ASC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__FORWARD_COMPOUND_2_DESC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__FORWARD_ID_ASC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__FORWARD_ID_DESC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__ID_ASC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__ID_DESC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__NAME_ASC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__NAME_DESC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__PARENT_ID_ASC
  FOO_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__PARENT_ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A condition to be used against \`Backward\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input BackwardCondition {
  \\"\\"\\"Checks for equality with the object’s \`fooId\` field.\\"\\"\\"
  fooId: Int

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`Backward\` values.\\"\\"\\"
type BackwardsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Backward\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [BackwardsEdge!]!

  \\"\\"\\"A list of \`Backward\` objects.\\"\\"\\"
  nodes: [Backward]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Backward\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Backward\` edge in the connection.\\"\\"\\"
type BackwardsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Backward\` at the end of the edge.\\"\\"\\"
  node: Backward
}

\\"\\"\\"Methods to use when ordering \`Backward\`.\\"\\"\\"
enum BackwardsOrderBy {
  FOO_BY_FOO_ID__BACKWARD_COMPOUND_1_ASC
  FOO_BY_FOO_ID__BACKWARD_COMPOUND_1_DESC
  FOO_BY_FOO_ID__BACKWARD_COMPOUND_2_ASC
  FOO_BY_FOO_ID__BACKWARD_COMPOUND_2_DESC
  FOO_BY_FOO_ID__FORWARD_COMPOUND_1_ASC
  FOO_BY_FOO_ID__FORWARD_COMPOUND_1_DESC
  FOO_BY_FOO_ID__FORWARD_COMPOUND_2_ASC
  FOO_BY_FOO_ID__FORWARD_COMPOUND_2_DESC
  FOO_BY_FOO_ID__FORWARD_ID_ASC
  FOO_BY_FOO_ID__FORWARD_ID_DESC
  FOO_BY_FOO_ID__ID_ASC
  FOO_BY_FOO_ID__ID_DESC
  FOO_BY_FOO_ID__NAME_ASC
  FOO_BY_FOO_ID__NAME_DESC
  FOO_BY_FOO_ID__PARENT_ID_ASC
  FOO_BY_FOO_ID__PARENT_ID_DESC
  FOO_ID_ASC
  FOO_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Child implements Node {
  \\"\\"\\"Reads a single \`Foo\` that is related to this \`Child\`.\\"\\"\\"
  fooByFooId: Foo
  fooId: Int
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`Child\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ChildCondition {
  \\"\\"\\"Checks for equality with the object’s \`fooId\` field.\\"\\"\\"
  fooId: Int

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`Child\` values.\\"\\"\\"
type ChildrenConnection {
  \\"\\"\\"
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ChildrenEdge!]!

  \\"\\"\\"A list of \`Child\` objects.\\"\\"\\"
  nodes: [Child]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Child\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Child\` edge in the connection.\\"\\"\\"
type ChildrenEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Child\` at the end of the edge.\\"\\"\\"
  node: Child
}

\\"\\"\\"Methods to use when ordering \`Child\`.\\"\\"\\"
enum ChildrenOrderBy {
  FOO_BY_FOO_ID__BACKWARD_COMPOUND_1_ASC
  FOO_BY_FOO_ID__BACKWARD_COMPOUND_1_DESC
  FOO_BY_FOO_ID__BACKWARD_COMPOUND_2_ASC
  FOO_BY_FOO_ID__BACKWARD_COMPOUND_2_DESC
  FOO_BY_FOO_ID__FORWARD_COMPOUND_1_ASC
  FOO_BY_FOO_ID__FORWARD_COMPOUND_1_DESC
  FOO_BY_FOO_ID__FORWARD_COMPOUND_2_ASC
  FOO_BY_FOO_ID__FORWARD_COMPOUND_2_DESC
  FOO_BY_FOO_ID__FORWARD_ID_ASC
  FOO_BY_FOO_ID__FORWARD_ID_DESC
  FOO_BY_FOO_ID__ID_ASC
  FOO_BY_FOO_ID__ID_DESC
  FOO_BY_FOO_ID__NAME_ASC
  FOO_BY_FOO_ID__NAME_DESC
  FOO_BY_FOO_ID__PARENT_ID_ASC
  FOO_BY_FOO_ID__PARENT_ID_DESC
  FOO_ID_ASC
  FOO_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

type Foo implements Node {
  \\"\\"\\"Reads a single \`Backward\` that is related to this \`Foo\`.\\"\\"\\"
  backwardByFooId: Backward
  backwardCompound1: Int
  backwardCompound2: Int

  \\"\\"\\"Reads a single \`BackwardCompound\` that is related to this \`Foo\`.\\"\\"\\"
  backwardCompoundByBackwardCompound1AndBackwardCompound2: BackwardCompound

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  childrenByFooId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ChildCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!

  \\"\\"\\"Reads a single \`Forward\` that is related to this \`Foo\`.\\"\\"\\"
  forwardByForwardId: Forward
  forwardCompound1: Int
  forwardCompound2: Int

  \\"\\"\\"Reads a single \`ForwardCompound\` that is related to this \`Foo\`.\\"\\"\\"
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompound
  forwardId: Int
  id: Int!
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Parent\` that is related to this \`Foo\`.\\"\\"\\"
  parentByParentId: Parent
  parentId: Int
}

\\"\\"\\"
A condition to be used against \`Foo\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input FooCondition {
  \\"\\"\\"Checks for equality with the object’s \`backwardCompound1\` field.\\"\\"\\"
  backwardCompound1: Int

  \\"\\"\\"Checks for equality with the object’s \`backwardCompound2\` field.\\"\\"\\"
  backwardCompound2: Int

  \\"\\"\\"Checks for equality with the object’s \`forwardCompound1\` field.\\"\\"\\"
  forwardCompound1: Int

  \\"\\"\\"Checks for equality with the object’s \`forwardCompound2\` field.\\"\\"\\"
  forwardCompound2: Int

  \\"\\"\\"Checks for equality with the object’s \`forwardId\` field.\\"\\"\\"
  forwardId: Int

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String

  \\"\\"\\"Checks for equality with the object’s \`parentId\` field.\\"\\"\\"
  parentId: Int
}

\\"\\"\\"A connection to a list of \`Foo\` values.\\"\\"\\"
type FoosConnection {
  \\"\\"\\"
  A list of edges which contains the \`Foo\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FoosEdge!]!

  \\"\\"\\"A list of \`Foo\` objects.\\"\\"\\"
  nodes: [Foo]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Foo\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Foo\` edge in the connection.\\"\\"\\"
type FoosEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Foo\` at the end of the edge.\\"\\"\\"
  node: Foo
}

\\"\\"\\"Methods to use when ordering \`Foo\`.\\"\\"\\"
enum FoosOrderBy {
  BACKWARD_BY_FOO_ID__FOO_ID_ASC
  BACKWARD_BY_FOO_ID__FOO_ID_DESC
  BACKWARD_BY_FOO_ID__ID_ASC
  BACKWARD_BY_FOO_ID__ID_DESC
  BACKWARD_BY_FOO_ID__NAME_ASC
  BACKWARD_BY_FOO_ID__NAME_DESC
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  BACKWARD_COMPOUND_2_ASC
  BACKWARD_COMPOUND_2_DESC
  BACKWARD_COMPOUND_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__BACKWARD_COMPOUND_1_DESC
  BACKWARD_COMPOUND_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__BACKWARD_COMPOUND_2_ASC
  BACKWARD_COMPOUND_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__BACKWARD_COMPOUND_2_DESC
  BACKWARD_COMPOUND_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__NAME_ASC
  BACKWARD_COMPOUND_BY_BACKWARD_COMPOUND_1_AND_BACKWARD_COMPOUND_2__NAME_DESC
  CHILDREN_BY_FOO_ID__COUNT_ASC
  CHILDREN_BY_FOO_ID__COUNT_DESC
  FORWARD_BY_FORWARD_ID__ID_ASC
  FORWARD_BY_FORWARD_ID__ID_DESC
  FORWARD_BY_FORWARD_ID__NAME_ASC
  FORWARD_BY_FORWARD_ID__NAME_DESC
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_2_ASC
  FORWARD_COMPOUND_2_DESC
  FORWARD_COMPOUND_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_COMPOUND_2_ASC
  FORWARD_COMPOUND_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_COMPOUND_2_DESC
  FORWARD_COMPOUND_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__NAME_ASC
  FORWARD_COMPOUND_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__NAME_DESC
  FORWARD_ID_ASC
  FORWARD_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PARENT_BY_PARENT_ID__ID_ASC
  PARENT_BY_PARENT_ID__ID_DESC
  PARENT_BY_PARENT_ID__NAME_ASC
  PARENT_BY_PARENT_ID__NAME_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Forward implements Node {
  \\"\\"\\"Reads a single \`Foo\` that is related to this \`Forward\`.\\"\\"\\"
  fooByForwardId: Foo
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

type ForwardCompound implements Node {
  \\"\\"\\"Reads a single \`Foo\` that is related to this \`ForwardCompound\`.\\"\\"\\"
  fooByForwardCompound1AndForwardCompound2: Foo
  forwardCompound1: Int!
  forwardCompound2: Int!
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`ForwardCompound\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ForwardCompoundCondition {
  \\"\\"\\"Checks for equality with the object’s \`forwardCompound1\` field.\\"\\"\\"
  forwardCompound1: Int

  \\"\\"\\"Checks for equality with the object’s \`forwardCompound2\` field.\\"\\"\\"
  forwardCompound2: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`ForwardCompound\` values.\\"\\"\\"
type ForwardCompoundsConnection {
  \\"\\"\\"
  A list of edges which contains the \`ForwardCompound\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ForwardCompoundsEdge!]!

  \\"\\"\\"A list of \`ForwardCompound\` objects.\\"\\"\\"
  nodes: [ForwardCompound]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`ForwardCompound\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`ForwardCompound\` edge in the connection.\\"\\"\\"
type ForwardCompoundsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`ForwardCompound\` at the end of the edge.\\"\\"\\"
  node: ForwardCompound
}

\\"\\"\\"Methods to use when ordering \`ForwardCompound\`.\\"\\"\\"
enum ForwardCompoundsOrderBy {
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__BACKWARD_COMPOUND_1_ASC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__BACKWARD_COMPOUND_1_DESC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__BACKWARD_COMPOUND_2_ASC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__BACKWARD_COMPOUND_2_DESC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_COMPOUND_1_ASC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_COMPOUND_1_DESC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_COMPOUND_2_ASC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_COMPOUND_2_DESC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_ID_ASC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__FORWARD_ID_DESC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__ID_ASC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__ID_DESC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__NAME_ASC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__NAME_DESC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__PARENT_ID_ASC
  FOO_BY_FORWARD_COMPOUND_1_AND_FORWARD_COMPOUND_2__PARENT_ID_DESC
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_2_ASC
  FORWARD_COMPOUND_2_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A condition to be used against \`Forward\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ForwardCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`Forward\` values.\\"\\"\\"
type ForwardsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Forward\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ForwardsEdge!]!

  \\"\\"\\"A list of \`Forward\` objects.\\"\\"\\"
  nodes: [Forward]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Forward\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Forward\` edge in the connection.\\"\\"\\"
type ForwardsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Forward\` at the end of the edge.\\"\\"\\"
  node: Forward
}

\\"\\"\\"Methods to use when ordering \`Forward\`.\\"\\"\\"
enum ForwardsOrderBy {
  FOO_BY_FORWARD_ID__BACKWARD_COMPOUND_1_ASC
  FOO_BY_FORWARD_ID__BACKWARD_COMPOUND_1_DESC
  FOO_BY_FORWARD_ID__BACKWARD_COMPOUND_2_ASC
  FOO_BY_FORWARD_ID__BACKWARD_COMPOUND_2_DESC
  FOO_BY_FORWARD_ID__FORWARD_COMPOUND_1_ASC
  FOO_BY_FORWARD_ID__FORWARD_COMPOUND_1_DESC
  FOO_BY_FORWARD_ID__FORWARD_COMPOUND_2_ASC
  FOO_BY_FORWARD_ID__FORWARD_COMPOUND_2_DESC
  FOO_BY_FORWARD_ID__FORWARD_ID_ASC
  FOO_BY_FORWARD_ID__FORWARD_ID_DESC
  FOO_BY_FORWARD_ID__ID_ASC
  FOO_BY_FORWARD_ID__ID_DESC
  FOO_BY_FORWARD_ID__NAME_ASC
  FOO_BY_FORWARD_ID__NAME_DESC
  FOO_BY_FORWARD_ID__PARENT_ID_ASC
  FOO_BY_FORWARD_ID__PARENT_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

type Parent implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Foo\`.\\"\\"\\"
  foosByParentId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: FooCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Foo\`.\\"\\"\\"
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoosConnection!
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`Parent\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ParentCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`Parent\` values.\\"\\"\\"
type ParentsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ParentsEdge!]!

  \\"\\"\\"A list of \`Parent\` objects.\\"\\"\\"
  nodes: [Parent]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Parent\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Parent\` edge in the connection.\\"\\"\\"
type ParentsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Parent\` at the end of the edge.\\"\\"\\"
  node: Parent
}

\\"\\"\\"Methods to use when ordering \`Parent\`.\\"\\"\\"
enum ParentsOrderBy {
  FOOS_BY_PARENT_ID__COUNT_ASC
  FOOS_BY_PARENT_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`BackwardCompound\`.\\"\\"\\"
  allBackwardCompounds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: BackwardCompoundCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`BackwardCompound\`.\\"\\"\\"
    orderBy: [BackwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardCompoundsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Backward\`.\\"\\"\\"
  allBackwards(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: BackwardCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Backward\`.\\"\\"\\"
    orderBy: [BackwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  allChildren(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ChildCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Foo\`.\\"\\"\\"
  allFoos(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: FooCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Foo\`.\\"\\"\\"
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoosConnection

  \\"\\"\\"Reads and enables pagination through a set of \`ForwardCompound\`.\\"\\"\\"
  allForwardCompounds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ForwardCompoundCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`ForwardCompound\`.\\"\\"\\"
    orderBy: [ForwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardCompoundsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Forward\`.\\"\\"\\"
  allForwards(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ForwardCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Forward\`.\\"\\"\\"
    orderBy: [ForwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Parent\`.\\"\\"\\"
  allParents(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ParentCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Parent\`.\\"\\"\\"
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  \\"\\"\\"Reads a single \`Backward\` using its globally unique \`ID\`.\\"\\"\\"
  backward(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Backward\`.\\"\\"\\"
    nodeId: ID!
  ): Backward
  backwardByFooId(fooId: Int!): Backward
  backwardById(id: Int!): Backward

  \\"\\"\\"Reads a single \`BackwardCompound\` using its globally unique \`ID\`.\\"\\"\\"
  backwardCompound(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`BackwardCompound\`.
    \\"\\"\\"
    nodeId: ID!
  ): BackwardCompound
  backwardCompoundByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): BackwardCompound

  \\"\\"\\"Reads a single \`Child\` using its globally unique \`ID\`.\\"\\"\\"
  child(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Child\`.\\"\\"\\"
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  \\"\\"\\"Reads a single \`Foo\` using its globally unique \`ID\`.\\"\\"\\"
  foo(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Foo\`.\\"\\"\\"
    nodeId: ID!
  ): Foo
  fooByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): Foo
  fooByForwardCompound1AndForwardCompound2(forwardCompound1: Int!, forwardCompound2: Int!): Foo
  fooByForwardId(forwardId: Int!): Foo
  fooById(id: Int!): Foo

  \\"\\"\\"Reads a single \`Forward\` using its globally unique \`ID\`.\\"\\"\\"
  forward(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Forward\`.\\"\\"\\"
    nodeId: ID!
  ): Forward
  forwardById(id: Int!): Forward

  \\"\\"\\"Reads a single \`ForwardCompound\` using its globally unique \`ID\`.\\"\\"\\"
  forwardCompound(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`ForwardCompound\`.
    \\"\\"\\"
    nodeId: ID!
  ): ForwardCompound
  forwardCompoundByForwardCompound1AndForwardCompound2(forwardCompound1: Int!, forwardCompound2: Int!): ForwardCompound

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Parent\` using its globally unique \`ID\`.\\"\\"\\"
  parent(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Parent\`.\\"\\"\\"
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!
}
"
`;
